----------------------------------------------------------------------------------
--Tool Version: Vivado v.2020.1 (lin64) Build 2902540 Wed May 27 19:54:35 MDT 2020
--Date        : Fri Nov  5 16:53:08 2021
--Host        : lhcelec01 running 64-bit Ubuntu 18.04.6 LTS
--Command     : generate_target design_1_wrapper.bd
--Design      : design_1_wrapper
--Purpose     : IP block netlist
----------------------------------------------------------------------------------

-- I create this entity copying and pasting design_1_wrapper.vhd which is
-- generated by Vivado from design_1.bd.
-- And I add Enclustra_GMII2RGMII_ZU here as the reference design
-- Mercury_XU5_PE1.vhd from Enclustra, for ETH1.
-- https://github.com/enclustra/Mercury_XU5_PE1_Reference_Design.git
-- K. Okazaki, ICEPP, University of Tokyo

---- Libraries ----
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
LIBRARY UNISIM;
USE UNISIM.VCOMPONENTS.ALL;

---- Entity declaration ----
ENTITY MercuryXU5_EndcapSL IS
    PORT (
        CFGDONE : IN STD_LOGIC;
        CFGINIT : IN STD_LOGIC;
--        CFGPROG : OUT STD_LOGIC_VECTOR (0 TO 0);
        -- RESETB for Si5345
        SIRST : OUT STD_LOGIC;
        -- ResetB for Si5344
        SI44RST : OUT STD_LOGIC;
        -- RESETB for FIrFly modules
        FIRRST : OUT STD_LOGIC;
        -- FirFly module select (active-low)
        FIRSEL : OUT STD_LOGIC_VECTOR(19 DOWNTO 0);
        -- 3-bit LED on the mezzanine
        LED : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
        -- PL_Gigabit_Ethernet
        ETH1_MDC     : OUT STD_LOGIC;
        ETH1_RXCLK   : IN STD_LOGIC;
        ETH1_TXCLK   : OUT STD_LOGIC;
        ETH1_MDIO    : INOUT STD_LOGIC;
        ETH1_INT_N   : IN STD_LOGIC;
        ETH1_RESET_N : OUT STD_LOGIC;
        ETH1_RXCTL   : IN STD_LOGIC;
        ETH1_TXCTL   : OUT STD_LOGIC;
        ETH1_RXD     : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
        ETH1_TXD     : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
        -- GT serial lines
        GT_DIFF_REFCLK1_clk_n : IN STD_LOGIC;
        GT_DIFF_REFCLK1_clk_p : IN STD_LOGIC;
        GT_SERIAL_F2Z_rxn     : IN STD_LOGIC_VECTOR (0 TO 0);
        GT_SERIAL_F2Z_rxp     : IN STD_LOGIC_VECTOR (0 TO 0);
        GT_SERIAL_Z2F_txn     : OUT STD_LOGIC_VECTOR (0 TO 0);
        GT_SERIAL_Z2F_txp     : OUT STD_LOGIC_VECTOR (0 TO 0);
        Si5345_INSEL          : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
        ---- JTAG lines for debugging XCVU13P
        ZYNQTCK : OUT STD_LOGIC;
        ZYNQTDI : OUT STD_LOGIC;
        ZYNQTDO : IN STD_LOGIC;
        ZYNQTMS : OUT STD_LOGIC
    );
END MercuryXU5_EndcapSL;

ARCHITECTURE RTL OF MercuryXU5_EndcapSL IS

    ---- Component declarations ----
    COMPONENT design_1 IS
        PORT (
            ETH_CLK125            : OUT STD_LOGIC;
            ETH_CLK125_90         : OUT STD_LOGIC;
            ETH_CLK25             : OUT STD_LOGIC;
            ETH_CLK10             : OUT STD_LOGIC;
            ETH_resetn            : OUT STD_LOGIC;
--            CFGPROG               : OUT STD_LOGIC_VECTOR (0 TO 0);
            ZYNQTDI               : OUT STD_LOGIC;
            ZYNQTDO               : IN STD_LOGIC;
            ZYNQTCK               : OUT STD_LOGIC;
            ZYNQTMS               : OUT STD_LOGIC;
            LED                   : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
            GT_SERIAL_Z2F_txn     : OUT STD_LOGIC_VECTOR (0 TO 0);
            GT_SERIAL_Z2F_txp     : OUT STD_LOGIC_VECTOR (0 TO 0);
            GT_DIFF_REFCLK1_clk_n : IN STD_LOGIC;
            GT_DIFF_REFCLK1_clk_p : IN STD_LOGIC;
            MDIO_mdc              : OUT STD_LOGIC;
            MDIO_mdio_i           : IN STD_LOGIC;
            MDIO_mdio_o           : OUT STD_LOGIC;
            MDIO_mdio_t           : OUT STD_LOGIC;
            GMII_rx_clk           : IN STD_LOGIC;
            GMII_speed_mode       : OUT STD_LOGIC_VECTOR (2 DOWNTO 0);
            GMII_crs              : IN STD_LOGIC;
            GMII_col              : IN STD_LOGIC;
            GMII_rxd              : IN STD_LOGIC_VECTOR (7 DOWNTO 0);
            GMII_rx_er            : IN STD_LOGIC;
            GMII_rx_dv            : IN STD_LOGIC;
            GMII_tx_clk           : IN STD_LOGIC;
            GMII_txd              : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
            GMII_tx_en            : OUT STD_LOGIC;
            GMII_tx_er            : OUT STD_LOGIC;
            GT_SERIAL_F2Z_rxn     : IN STD_LOGIC_VECTOR (0 TO 0);
            GT_SERIAL_F2Z_rxp     : IN STD_LOGIC_VECTOR (0 TO 0);
            Si5345_INSEL          : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
            CFGINIT               : IN STD_LOGIC;
            CFGDONE               : IN STD_LOGIC
        );
    END COMPONENT design_1;

    COMPONENT IOBUF IS
        PORT (
            I  : IN STD_LOGIC;
            O  : OUT STD_LOGIC;
            T  : IN STD_LOGIC;
            IO : INOUT STD_LOGIC
        );
    END COMPONENT IOBUF;

    COMPONENT Enclustra_GMII2RGMII_ZU IS
        PORT (
            Clk125    : IN STD_LOGIC;
            Clk125_90 : IN STD_LOGIC;
            Clk25     : IN STD_LOGIC;
            Clk10     : IN STD_LOGIC;
            Resetn    : IN STD_LOGIC;

            GMII_col        : OUT STD_LOGIC;
            GMII_crs        : OUT STD_LOGIC;
            GMII_rx_clk     : OUT STD_LOGIC;
            GMII_rx_dv      : OUT STD_LOGIC;
            GMII_rx_er      : OUT STD_LOGIC;
            GMII_rxd        : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
            GMII_speed_mode : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
            GMII_tx_clk     : OUT STD_LOGIC;
            GMII_tx_en      : IN STD_LOGIC;
            GMII_tx_er      : IN STD_LOGIC;
            GMII_txd        : IN STD_LOGIC_VECTOR(7 DOWNTO 0);

            RGMII_rxd   : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
            RGMII_rxclk : IN STD_LOGIC;
            RGMII_rxctl : IN STD_LOGIC;
            RGMII_txd   : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
            RGMII_txclk : OUT STD_LOGIC;
            RGMII_txctl : OUT STD_LOGIC;

            Speed1000En : OUT STD_LOGIC;
            Speed100En  : OUT STD_LOGIC;
            Speed10En   : OUT STD_LOGIC
        );
    END COMPONENT Enclustra_GMII2RGMII_ZU;

    ---- Signal declarations ----
    SIGNAL MDIO_mdio_i     : STD_LOGIC;
    SIGNAL MDIO_mdio_o     : STD_LOGIC;
    SIGNAL MDIO_mdio_t     : STD_LOGIC;
    SIGNAL ETH_CLK125      : STD_LOGIC;
    SIGNAL ETH_CLK125_90   : STD_LOGIC;
    SIGNAL ETH_CLK25       : STD_LOGIC;
    SIGNAL ETH_CLK10       : STD_LOGIC;
    SIGNAL ETH_resetn      : STD_LOGIC;
    SIGNAL GMII_col        : STD_LOGIC;
    SIGNAL GMII_crs        : STD_LOGIC;
    SIGNAL GMII_rx_clk     : STD_LOGIC;
    SIGNAL GMII_rx_dv      : STD_LOGIC;
    SIGNAL GMII_rx_er      : STD_LOGIC;
    SIGNAL GMII_rxd        : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL GMII_speed_mode : STD_LOGIC_VECTOR(2 DOWNTO 0);
    SIGNAL GMII_tx_clk     : STD_LOGIC;
    SIGNAL GMII_tx_en      : STD_LOGIC;
    SIGNAL GMII_tx_er      : STD_LOGIC;
    SIGNAL GMII_txd        : STD_LOGIC_VECTOR(7 DOWNTO 0);

BEGIN

    MDIO_mdio_iobuf : COMPONENT IOBUF
        PORT MAP(
            I  => MDIO_mdio_o,
            IO => ETH1_MDIO,
            O  => MDIO_mdio_i,
            T  => MDIO_mdio_t
        );

        design_1_i : COMPONENT design_1
            PORT MAP(
                CFGDONE                  => CFGDONE,
                CFGINIT                  => CFGINIT,
--                CFGPROG(0)               => CFGPROG(0),
                Si5345_INSEL(1 DOWNTO 0) => Si5345_INSEL(1 DOWNTO 0),
                ETH_CLK10                => ETH_CLK10,
                ETH_CLK125               => ETH_CLK125,
                ETH_CLK125_90            => ETH_CLK125_90,
                ETH_CLK25                => ETH_CLK25,
                ETH_resetn               => ETH_resetn,
                GMII_col                 => GMII_col,
                GMII_crs                 => GMII_crs,
                GMII_rx_clk              => GMII_rx_clk,
                GMII_rx_dv               => GMII_rx_dv,
                GMII_rx_er               => GMII_rx_er,
                GMII_rxd                 => GMII_rxd,
                GMII_speed_mode          => GMII_speed_mode,
                GMII_tx_clk              => GMII_tx_clk,
                GMII_tx_en               => GMII_tx_en,
                GMII_tx_er               => GMII_tx_er,
                GMII_txd                 => GMII_txd,
                LED                      => LED,
                MDIO_mdc                 => ETH1_MDC,
                MDIO_mdio_i              => MDIO_mdio_i,
                MDIO_mdio_o              => MDIO_mdio_o,
                MDIO_mdio_t              => MDIO_mdio_t,
                ZYNQTCK                  => ZYNQTCK,
                ZYNQTDI                  => ZYNQTDI,
                ZYNQTDO                  => ZYNQTDO,
                ZYNQTMS                  => ZYNQTMS,
                GT_DIFF_REFCLK1_clk_n    => GT_DIFF_REFCLK1_clk_n,
                GT_DIFF_REFCLK1_clk_p    => GT_DIFF_REFCLK1_clk_p,
                GT_SERIAL_F2Z_rxn(0)     => GT_SERIAL_F2Z_rxn(0),
                GT_SERIAL_F2Z_rxp(0)     => GT_SERIAL_F2Z_rxp(0),
                GT_SERIAL_Z2F_txn(0)     => GT_SERIAL_Z2F_txn(0),
                GT_SERIAL_Z2F_txp(0)     => GT_SERIAL_Z2F_txp(0)
            );

            -- resetb lines for peripherals on Endcap Sector Logic
            SIRST   <= '1'; -- Si5345
            SI44RST <= '1'; -- Si5344
            FIRRST  <= '1'; -- FireFly

            -- FirFly module select (active-low)
            FIRSEL <= (OTHERS => '1');
            -- We cannot use Xilinx's GMII2RGMII IP core for Mercury XU5 mezzanine.
            -- Instead, Enclustra provides Enclustra_GMII2RGMII_ZU.edn.
            -- Please see Mercury XU5 PE1 reference design.
            -- https://github.com/enclustra/Mercury_XU5_PE1_Reference_Design.git
            i_gmii2rgmii : Enclustra_GMII2RGMII_ZU
            PORT MAP(
                Clk125    => ETH_CLK125,
                Clk125_90 => ETH_CLK125_90,
                Clk25     => ETH_Clk25,
                Clk10     => ETH_Clk10,
                Resetn    => ETH_resetn,

                GMII_col        => GMII_col,
                GMII_crs        => GMII_crs,
                GMII_rx_clk     => GMII_rx_clk,
                GMII_rx_dv      => GMII_rx_dv,
                GMII_rx_er      => GMII_rx_er,
                GMII_rxd        => GMII_rxd,
                GMII_speed_mode => GMII_speed_mode,
                GMII_tx_clk     => GMII_tx_clk,
                GMII_tx_en      => GMII_tx_en,
                GMII_tx_er      => GMII_tx_er,
                GMII_txd        => GMII_txd,

                RGMII_rxd   => ETH1_RXD,
                RGMII_rxclk => ETH1_RXCLK,
                RGMII_rxctl => ETH1_RXCTL,
                RGMII_txd   => ETH1_TXD,
                RGMII_txclk => ETH1_TXCLK,
                RGMII_txctl => ETH1_TXCTL,

                Speed1000En => OPEN,
                Speed100En  => OPEN,
                Speed10En   => OPEN
            );

            ETH1_RESET_N <= ETH_resetn;

        END RTL;